name: "CaffeNet"
input: "data"
input_dim: 10
input_dim: 3
input_dim: 227
input_dim: 227

# Freeze only the first few layers
layers {
  name: "conv1"
  type: CONVOLUTION
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 96
    kernel_size: 7
    stride: 4
  }
  param {
    lr_mult: 0  # Freeze this layer
  }
}
layers {
  name: "relu1"
  type: RELU
  bottom: "conv1"
  top: "conv1"
  param {
    lr_mult: 0  # Freeze this layer
  }
}
layers {
  name: "pool1"
  type: POOLING
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
  param {
    lr_mult: 0  # Freeze this layer
  }
}
layers {
  name: "norm1"
  type: LRN
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
  param {
    lr_mult: 0  # Freeze this layer
  }
}

# Unfreeze the next layers to allow fine-tuning
layers {
  name: "conv2"
  type: CONVOLUTION
  bottom: "norm1"
  top: "conv2"
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
  }
  param {
    lr_mult: 1  # Allow this layer to be trained
  }
}
layers {
  name: "relu2"
  type: RELU
  bottom: "conv2"
  top: "conv2"
}
layers {
  name: "pool2"
  type: POOLING
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layers {
  name: "norm2"
  type: LRN
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}

# Unfreeze the next layers
layers {
  name: "conv3"
  type: CONVOLUTION
  bottom: "norm2"
  top: "conv3"
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
  }
  param {
    lr_mult: 1  # Allow this layer to be trained
  }
}
layers {
  name: "relu3"
  type: RELU
  bottom: "conv3"
  top: "conv3"
}
layers {
  name: "pool3"
  type: POOLING
  bottom: "conv3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}

# Unfreeze fully connected layers
layers {
  name: "fc6"
  type: INNER_PRODUCT
  bottom: "pool3"
  top: "fc6"
  inner_product_param {
    num_output: 512
  }
  param {
    lr_mult: 1  # Allow this layer to be trained
  }
}
layers {
  name: "relu6"
  type: RELU
  bottom: "fc6"
  top: "fc6"
}
layers {
  name: "drop6"
  type: DROPOUT
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layers {
  name: "fc7"
  type: INNER_PRODUCT
  bottom: "fc6"
  top: "fc7"
  inner_product_param {
    num_output: 512
  }
  param {
    lr_mult: 1  # Allow this layer to be trained
  }
}
layers {
  name: "relu7"
  type: RELU
  bottom: "fc7"
  top: "fc7"
}
layers {
  name: "drop7"
  type: DROPOUT
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layers {
  name: "fc8"
  type: INNER_PRODUCT
  bottom: "fc7"
  top: "fc8"
  inner_product_param {
    num_output: 2  # Number of classes for gender identification
  }
}
layers {
  name: "prob"
  type: SOFTMAX
  bottom: "fc8"
  top: "prob"
}

# New layers for fine-tuning
layers {
  name: "conv4"
  type: CONVOLUTION
  bottom: "pool3"
  top: "conv4"
  convolution_param {
    num_output: 128
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  param {
    lr_mult: 1  # Allow this layer to be trained
  }
}
layers {
  name: "relu4"
  type: RELU
  bottom: "conv4"
  top: "conv4"
}
layers {
  name: "pool4"
  type: POOLING
  bottom: "conv4"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layers {
  name: "drop8"
  type: DROPOUT
  bottom: "conv4"
  top: "conv4"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layers {
  name: "fc9"
  type: INNER_PRODUCT
  bottom: "pool4"
  top: "fc9"
  inner_product_param {
    num_output: 2  # Number of classes for gender identification
  }
  param {
    lr_mult: 1  # Allow this layer to be trained
  }
}
layers {
  name: "prob_new"
  type: SOFTMAX
  bottom: "fc9"
  top: "prob_new"
}

# Additional fine-tuning techniques
layers {
  name: "batch_norm1"
  type: BATCHNORM
  bottom: "fc6"
  top: "fc6_bn"
}
layers {
  name: "scale1"
  type: SCALE
  bottom: "fc6_bn"
  top: "fc6"
}
layers {
  name: "batch_norm2"
  type: BATCHNORM
  bottom: "fc7"
  top: "fc7_bn"
}
layers {
  name: "scale2"
  type: SCALE
  bottom: "fc7_bn"
  top: "fc7"
}
