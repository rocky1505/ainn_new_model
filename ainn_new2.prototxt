name: "CaffeNet"
input: "data"
input_dim: 10
input_dim: 3
input_dim: 227
input_dim: 227

# Convolutional Layers
layers {
  name: "conv1"
  type: CONVOLUTION
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 96
    kernel_size: 7
    stride: 4
  }
  param {
    lr_mult: 0.1  # Reduced learning rate for early layers
  }
}
layers {
  name: "relu1"
  type: RELU
  bottom: "conv1"
  top: "conv1"
}
layers {
  name: "pool1"
  type: POOLING
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layers {
  name: "norm1"
  type: LRN
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}

# Unfreezing conv2 for fine-tuning with adjusted learning rate
layers {
  name: "conv2"
  type: CONVOLUTION
  bottom: "norm1"
  top: "conv2"
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
  }
  param {
    lr_mult: 0.1  # Unfreeze with a lower learning rate for better fine-tuning
  }
}
layers {
  name: "relu2"
  type: RELU
  bottom: "conv2"
  top: "conv2"
}
layers {
  name: "pool2"
  type: POOLING
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layers {
  name: "norm2"
  type: LRN
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}

# Unfreezing conv3 for fine-tuning
layers {
  name: "conv3"
  type: CONVOLUTION
  bottom: "norm2"
  top: "conv3"
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
  }
  param {
    lr_mult: 0.1  # Unfreezing conv3 with fine-tuning
  }
}
layers {
  name: "relu3"
  type: RELU
  bottom: "conv3"
  top: "conv3"
}
layers {
  name: "pool5"
  type: POOLING
  bottom: "conv3"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}

# Fully connected layers with increased capacity and dropout
layers {
  name: "fc6"
  type: INNER_PRODUCT
  bottom: "pool5"
  top: "fc6"
  inner_product_param {
    num_output: 1024  # Increased from 512 for better feature abstraction
  }
}
layers {
  name: "relu6"
  type: RELU
  bottom: "fc6"
  top: "fc6"
}
layers {
  name: "drop6"
  type: DROPOUT
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.6  # Increased dropout for regularization
  }
}

# Batch Normalization for stable training
layers {
  name: "fc6_bn"
  type: BATCHNORM
  bottom: "fc6"
  top: "fc6_bn"
}

layers {
  name: "fc7"
  type: INNER_PRODUCT
  bottom: "fc6_bn"
  top: "fc7"
  inner_product_param {
    num_output: 1024  # Increased neurons for better capacity
  }
}
layers {
  name: "relu7"
  type: RELU
  bottom: "fc7"
  top: "fc7"
}
layers {
  name: "drop7"
  type: DROPOUT
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.6  # Increased dropout
  }
}

# New Fully Connected and Softmax Layers
layers {
  name: "fc8"
  type: INNER_PRODUCT
  bottom: "fc7"
  top: "fc8"
  inner_product_param {
    num_output: 512
  }
}

layers {
  name: "conv_new"
  type: CONVOLUTION
  bottom: "conv3"
  top: "conv_new"
  convolution_param {
    num_output: 256
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layers {
  name: "relu_new"
  type: RELU
  bottom: "conv_new"
  top: "conv_new"
}
layers {
  name: "fc_new"
  type: INNER_PRODUCT
  bottom: "fc8"
  top: "fc_new"
  inner_product_param {
    num_output: 512
  }
}
layers {
  name: "fc_final"
  type: INNER_PRODUCT
  bottom: "fc_new"
  top: "fc_final"
  inner_product_param {
    num_output: 4  # Increased number of output neurons if required
  }
}
layers {
  name: "softmax_final"
  type: SOFTMAX
  bottom: "fc_final"
  top: "softmax_final"
}
